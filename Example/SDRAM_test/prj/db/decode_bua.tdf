--lpm_decode CBX_DECLARE_ALL_CONNECTED_PORTS="OFF" DEVICE_FAMILY="Cyclone IV E" LPM_DECODES=16 LPM_WIDTH=4 data enable eq
--VERSION_BEGIN 18.1 cbx_cycloneii 2018:09:12:13:04:24:SJ cbx_lpm_add_sub 2018:09:12:13:04:24:SJ cbx_lpm_compare 2018:09:12:13:04:24:SJ cbx_lpm_decode 2018:09:12:13:04:24:SJ cbx_mgl 2018:09:12:13:10:36:SJ cbx_nadder 2018:09:12:13:04:24:SJ cbx_stratix 2018:09:12:13:04:24:SJ cbx_stratixii 2018:09:12:13:04:24:SJ  VERSION_END


-- Copyright (C) 2018  Intel Corporation. All rights reserved.
--  Your use of Intel Corporation's design tools, logic functions 
--  and other software and tools, and its AMPP partner logic 
--  functions, and any output files from any of the foregoing 
--  (including device programming or simulation files), and any 
--  associated documentation or information are expressly subject 
--  to the terms and conditions of the Intel Program License 
--  Subscription Agreement, the Intel Quartus Prime License Agreement,
--  the Intel FPGA IP License Agreement, or other applicable license
--  agreement, including, without limitation, that your use is for
--  the sole purpose of programming logic devices manufactured by
--  Intel and sold by Intel or its authorized distributors.  Please
--  refer to the applicable agreement for further details.



--synthesis_resources = lut 18 
SUBDESIGN decode_bua
( 
	data[3..0]	:	input;
	enable	:	input;
	eq[15..0]	:	output;
) 
VARIABLE 
	data_wire[3..0]	: WIRE;
	enable_wire	: WIRE;
	eq_node[15..0]	: WIRE;
	eq_wire[15..0]	: WIRE;
	w_anode203w[1..0]	: WIRE;
	w_anode212w[3..0]	: WIRE;
	w_anode229w[3..0]	: WIRE;
	w_anode239w[3..0]	: WIRE;
	w_anode249w[3..0]	: WIRE;
	w_anode259w[3..0]	: WIRE;
	w_anode269w[3..0]	: WIRE;
	w_anode279w[3..0]	: WIRE;
	w_anode289w[3..0]	: WIRE;
	w_anode301w[1..0]	: WIRE;
	w_anode308w[3..0]	: WIRE;
	w_anode319w[3..0]	: WIRE;
	w_anode329w[3..0]	: WIRE;
	w_anode339w[3..0]	: WIRE;
	w_anode349w[3..0]	: WIRE;
	w_anode359w[3..0]	: WIRE;
	w_anode369w[3..0]	: WIRE;
	w_anode379w[3..0]	: WIRE;
	w_data201w[2..0]	: WIRE;

BEGIN 
	data_wire[] = data[];
	enable_wire = enable;
	eq[] = eq_node[];
	eq_node[15..0] = eq_wire[15..0];
	eq_wire[] = ( ( w_anode379w[3..3], w_anode369w[3..3], w_anode359w[3..3], w_anode349w[3..3], w_anode339w[3..3], w_anode329w[3..3], w_anode319w[3..3], w_anode308w[3..3]), ( w_anode289w[3..3], w_anode279w[3..3], w_anode269w[3..3], w_anode259w[3..3], w_anode249w[3..3], w_anode239w[3..3], w_anode229w[3..3], w_anode212w[3..3]));
	w_anode203w[] = ( (w_anode203w[0..0] & (! data_wire[3..3])), enable_wire);
	w_anode212w[] = ( (w_anode212w[2..2] & (! w_data201w[2..2])), (w_anode212w[1..1] & (! w_data201w[1..1])), (w_anode212w[0..0] & (! w_data201w[0..0])), w_anode203w[1..1]);
	w_anode229w[] = ( (w_anode229w[2..2] & (! w_data201w[2..2])), (w_anode229w[1..1] & (! w_data201w[1..1])), (w_anode229w[0..0] & w_data201w[0..0]), w_anode203w[1..1]);
	w_anode239w[] = ( (w_anode239w[2..2] & (! w_data201w[2..2])), (w_anode239w[1..1] & w_data201w[1..1]), (w_anode239w[0..0] & (! w_data201w[0..0])), w_anode203w[1..1]);
	w_anode249w[] = ( (w_anode249w[2..2] & (! w_data201w[2..2])), (w_anode249w[1..1] & w_data201w[1..1]), (w_anode249w[0..0] & w_data201w[0..0]), w_anode203w[1..1]);
	w_anode259w[] = ( (w_anode259w[2..2] & w_data201w[2..2]), (w_anode259w[1..1] & (! w_data201w[1..1])), (w_anode259w[0..0] & (! w_data201w[0..0])), w_anode203w[1..1]);
	w_anode269w[] = ( (w_anode269w[2..2] & w_data201w[2..2]), (w_anode269w[1..1] & (! w_data201w[1..1])), (w_anode269w[0..0] & w_data201w[0..0]), w_anode203w[1..1]);
	w_anode279w[] = ( (w_anode279w[2..2] & w_data201w[2..2]), (w_anode279w[1..1] & w_data201w[1..1]), (w_anode279w[0..0] & (! w_data201w[0..0])), w_anode203w[1..1]);
	w_anode289w[] = ( (w_anode289w[2..2] & w_data201w[2..2]), (w_anode289w[1..1] & w_data201w[1..1]), (w_anode289w[0..0] & w_data201w[0..0]), w_anode203w[1..1]);
	w_anode301w[] = ( (w_anode301w[0..0] & data_wire[3..3]), enable_wire);
	w_anode308w[] = ( (w_anode308w[2..2] & (! w_data201w[2..2])), (w_anode308w[1..1] & (! w_data201w[1..1])), (w_anode308w[0..0] & (! w_data201w[0..0])), w_anode301w[1..1]);
	w_anode319w[] = ( (w_anode319w[2..2] & (! w_data201w[2..2])), (w_anode319w[1..1] & (! w_data201w[1..1])), (w_anode319w[0..0] & w_data201w[0..0]), w_anode301w[1..1]);
	w_anode329w[] = ( (w_anode329w[2..2] & (! w_data201w[2..2])), (w_anode329w[1..1] & w_data201w[1..1]), (w_anode329w[0..0] & (! w_data201w[0..0])), w_anode301w[1..1]);
	w_anode339w[] = ( (w_anode339w[2..2] & (! w_data201w[2..2])), (w_anode339w[1..1] & w_data201w[1..1]), (w_anode339w[0..0] & w_data201w[0..0]), w_anode301w[1..1]);
	w_anode349w[] = ( (w_anode349w[2..2] & w_data201w[2..2]), (w_anode349w[1..1] & (! w_data201w[1..1])), (w_anode349w[0..0] & (! w_data201w[0..0])), w_anode301w[1..1]);
	w_anode359w[] = ( (w_anode359w[2..2] & w_data201w[2..2]), (w_anode359w[1..1] & (! w_data201w[1..1])), (w_anode359w[0..0] & w_data201w[0..0]), w_anode301w[1..1]);
	w_anode369w[] = ( (w_anode369w[2..2] & w_data201w[2..2]), (w_anode369w[1..1] & w_data201w[1..1]), (w_anode369w[0..0] & (! w_data201w[0..0])), w_anode301w[1..1]);
	w_anode379w[] = ( (w_anode379w[2..2] & w_data201w[2..2]), (w_anode379w[1..1] & w_data201w[1..1]), (w_anode379w[0..0] & w_data201w[0..0]), w_anode301w[1..1]);
	w_data201w[2..0] = data_wire[2..0];
END;
--VALID FILE
