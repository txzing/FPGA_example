|fsm_clock
sys_clk => sys_clk.IN4
sys_rst_n => sys_rst_n.IN4
key_in[0] => key_in[0].IN1
key_in[1] => key_in[1].IN1
key_in[2] => key_in[2].IN1
seg_sel_n[0] << seg_driver:u_seg_driver.seg_sel_n
seg_sel_n[1] << seg_driver:u_seg_driver.seg_sel_n
seg_sel_n[2] << seg_driver:u_seg_driver.seg_sel_n
seg_sel_n[3] << seg_driver:u_seg_driver.seg_sel_n
seg_sel_n[4] << seg_driver:u_seg_driver.seg_sel_n
seg_sel_n[5] << seg_driver:u_seg_driver.seg_sel_n
seg_data[0] << seg_driver:u_seg_driver.seg_data
seg_data[1] << seg_driver:u_seg_driver.seg_data
seg_data[2] << seg_driver:u_seg_driver.seg_data
seg_data[3] << seg_driver:u_seg_driver.seg_data
seg_data[4] << seg_driver:u_seg_driver.seg_data
seg_data[5] << seg_driver:u_seg_driver.seg_data
seg_data[6] << seg_driver:u_seg_driver.seg_data
seg_data[7] << seg_driver:u_seg_driver.seg_data
beep_n << beep_driver:u_beep_driver.beep_n


|fsm_clock|key_filter:u_key_filter
clk => key_down[0]~reg0.CLK
clk => key_down[1]~reg0.CLK
clk => key_down[2]~reg0.CLK
clk => cnt[0].CLK
clk => cnt[1].CLK
clk => cnt[2].CLK
clk => cnt[3].CLK
clk => cnt[4].CLK
clk => cnt[5].CLK
clk => cnt[6].CLK
clk => cnt[7].CLK
clk => cnt[8].CLK
clk => cnt[9].CLK
clk => cnt[10].CLK
clk => cnt[11].CLK
clk => cnt[12].CLK
clk => cnt[13].CLK
clk => cnt[14].CLK
clk => cnt[15].CLK
clk => cnt[16].CLK
clk => cnt[17].CLK
clk => cnt[18].CLK
clk => cnt[19].CLK
clk => key_in_r2[0].CLK
clk => key_in_r2[1].CLK
clk => key_in_r2[2].CLK
clk => key_in_r1[0].CLK
clk => key_in_r1[1].CLK
clk => key_in_r1[2].CLK
clk => key_in_r0[0].CLK
clk => key_in_r0[1].CLK
clk => key_in_r0[2].CLK
clk => state_c~1.DATAIN
rst_n => cnt[0].ACLR
rst_n => cnt[1].ACLR
rst_n => cnt[2].ACLR
rst_n => cnt[3].ACLR
rst_n => cnt[4].ACLR
rst_n => cnt[5].ACLR
rst_n => cnt[6].ACLR
rst_n => cnt[7].ACLR
rst_n => cnt[8].ACLR
rst_n => cnt[9].ACLR
rst_n => cnt[10].ACLR
rst_n => cnt[11].ACLR
rst_n => cnt[12].ACLR
rst_n => cnt[13].ACLR
rst_n => cnt[14].ACLR
rst_n => cnt[15].ACLR
rst_n => cnt[16].ACLR
rst_n => cnt[17].ACLR
rst_n => cnt[18].ACLR
rst_n => cnt[19].ACLR
rst_n => key_in_r2[0].PRESET
rst_n => key_in_r2[1].PRESET
rst_n => key_in_r2[2].PRESET
rst_n => key_in_r1[0].PRESET
rst_n => key_in_r1[1].PRESET
rst_n => key_in_r1[2].PRESET
rst_n => key_in_r0[0].PRESET
rst_n => key_in_r0[1].PRESET
rst_n => key_in_r0[2].PRESET
rst_n => key_down[0]~reg0.ACLR
rst_n => key_down[1]~reg0.ACLR
rst_n => key_down[2]~reg0.ACLR
rst_n => state_c~3.DATAIN
key_in[0] => key_in_r0[0].DATAIN
key_in[1] => key_in_r0[1].DATAIN
key_in[2] => key_in_r0[2].DATAIN
key_down[0] <= key_down[0]~reg0.DB_MAX_OUTPUT_PORT_TYPE
key_down[1] <= key_down[1]~reg0.DB_MAX_OUTPUT_PORT_TYPE
key_down[2] <= key_down[2]~reg0.DB_MAX_OUTPUT_PORT_TYPE


|fsm_clock|clock:u_clock
clk => beep_en~reg0.CLK
clk => dout_mask[0]~reg0.CLK
clk => dout_mask[1]~reg0.CLK
clk => dout_mask[2]~reg0.CLK
clk => dout_mask[3]~reg0.CLK
clk => dout_mask[4]~reg0.CLK
clk => dout_mask[5]~reg0.CLK
clk => dout[0]~reg0.CLK
clk => dout[1]~reg0.CLK
clk => dout[2]~reg0.CLK
clk => dout[3]~reg0.CLK
clk => dout[4]~reg0.CLK
clk => dout[5]~reg0.CLK
clk => dout[6]~reg0.CLK
clk => dout[7]~reg0.CLK
clk => dout[8]~reg0.CLK
clk => dout[9]~reg0.CLK
clk => dout[10]~reg0.CLK
clk => dout[11]~reg0.CLK
clk => dout[12]~reg0.CLK
clk => dout[13]~reg0.CLK
clk => dout[14]~reg0.CLK
clk => dout[15]~reg0.CLK
clk => dout[16]~reg0.CLK
clk => dout[17]~reg0.CLK
clk => dout[18]~reg0.CLK
clk => dout[19]~reg0.CLK
clk => dout[20]~reg0.CLK
clk => dout[21]~reg0.CLK
clk => dout[22]~reg0.CLK
clk => dout[23]~reg0.CLK
clk => alarm_h_s[0].CLK
clk => alarm_h_s[1].CLK
clk => alarm_h_s[2].CLK
clk => alarm_h_s[3].CLK
clk => alarm_h_g[0].CLK
clk => alarm_h_g[1].CLK
clk => alarm_h_g[2].CLK
clk => alarm_h_g[3].CLK
clk => alarm_m_s[0].CLK
clk => alarm_m_s[1].CLK
clk => alarm_m_s[2].CLK
clk => alarm_m_s[3].CLK
clk => alarm_m_g[0].CLK
clk => alarm_m_g[1].CLK
clk => alarm_m_g[2].CLK
clk => alarm_m_g[3].CLK
clk => alarm_s_s[0].CLK
clk => alarm_s_s[1].CLK
clk => alarm_s_s[2].CLK
clk => alarm_s_s[3].CLK
clk => alarm_s_g[0].CLK
clk => alarm_s_g[1].CLK
clk => alarm_s_g[2].CLK
clk => alarm_s_g[3].CLK
clk => alarm_flag[0].CLK
clk => alarm_flag[1].CLK
clk => alarm_flag[2].CLK
clk => alarm_flag[3].CLK
clk => alarm_flag[4].CLK
clk => alarm_flag[5].CLK
clk => set_h_s[0].CLK
clk => set_h_s[1].CLK
clk => set_h_s[2].CLK
clk => set_h_s[3].CLK
clk => set_h_g[0].CLK
clk => set_h_g[1].CLK
clk => set_h_g[2].CLK
clk => set_h_g[3].CLK
clk => set_m_s[0].CLK
clk => set_m_s[1].CLK
clk => set_m_s[2].CLK
clk => set_m_s[3].CLK
clk => set_m_g[0].CLK
clk => set_m_g[1].CLK
clk => set_m_g[2].CLK
clk => set_m_g[3].CLK
clk => set_s_s[0].CLK
clk => set_s_s[1].CLK
clk => set_s_s[2].CLK
clk => set_s_s[3].CLK
clk => set_s_g[0].CLK
clk => set_s_g[1].CLK
clk => set_s_g[2].CLK
clk => set_s_g[3].CLK
clk => set_flag[0].CLK
clk => set_flag[1].CLK
clk => set_flag[2].CLK
clk => set_flag[3].CLK
clk => set_flag[4].CLK
clk => set_flag[5].CLK
clk => cnt_h_s[0].CLK
clk => cnt_h_s[1].CLK
clk => cnt_h_s[2].CLK
clk => cnt_h_s[3].CLK
clk => cnt_h_g[0].CLK
clk => cnt_h_g[1].CLK
clk => cnt_h_g[2].CLK
clk => cnt_h_g[3].CLK
clk => cnt_m_s[0].CLK
clk => cnt_m_s[1].CLK
clk => cnt_m_s[2].CLK
clk => cnt_m_s[3].CLK
clk => cnt_m_g[0].CLK
clk => cnt_m_g[1].CLK
clk => cnt_m_g[2].CLK
clk => cnt_m_g[3].CLK
clk => cnt_s_s[0].CLK
clk => cnt_s_s[1].CLK
clk => cnt_s_s[2].CLK
clk => cnt_s_s[3].CLK
clk => cnt_s_g[0].CLK
clk => cnt_s_g[1].CLK
clk => cnt_s_g[2].CLK
clk => cnt_s_g[3].CLK
clk => cnt_1s[0].CLK
clk => cnt_1s[1].CLK
clk => cnt_1s[2].CLK
clk => cnt_1s[3].CLK
clk => cnt_1s[4].CLK
clk => cnt_1s[5].CLK
clk => cnt_1s[6].CLK
clk => cnt_1s[7].CLK
clk => cnt_1s[8].CLK
clk => cnt_1s[9].CLK
clk => cnt_1s[10].CLK
clk => cnt_1s[11].CLK
clk => cnt_1s[12].CLK
clk => cnt_1s[13].CLK
clk => cnt_1s[14].CLK
clk => cnt_1s[15].CLK
clk => cnt_1s[16].CLK
clk => cnt_1s[17].CLK
clk => cnt_1s[18].CLK
clk => cnt_1s[19].CLK
clk => cnt_1s[20].CLK
clk => cnt_1s[21].CLK
clk => cnt_1s[22].CLK
clk => cnt_1s[23].CLK
clk => cnt_1s[24].CLK
clk => cnt_1s[25].CLK
clk => state_c~1.DATAIN
rst_n => dout_mask[0]~reg0.ACLR
rst_n => dout_mask[1]~reg0.ACLR
rst_n => dout_mask[2]~reg0.ACLR
rst_n => dout_mask[3]~reg0.ACLR
rst_n => dout_mask[4]~reg0.ACLR
rst_n => dout_mask[5]~reg0.ACLR
rst_n => dout[0]~reg0.ACLR
rst_n => dout[1]~reg0.ACLR
rst_n => dout[2]~reg0.ACLR
rst_n => dout[3]~reg0.ACLR
rst_n => dout[4]~reg0.ACLR
rst_n => dout[5]~reg0.ACLR
rst_n => dout[6]~reg0.ACLR
rst_n => dout[7]~reg0.ACLR
rst_n => dout[8]~reg0.ACLR
rst_n => dout[9]~reg0.ACLR
rst_n => dout[10]~reg0.ACLR
rst_n => dout[11]~reg0.ACLR
rst_n => dout[12]~reg0.ACLR
rst_n => dout[13]~reg0.ACLR
rst_n => dout[14]~reg0.ACLR
rst_n => dout[15]~reg0.ACLR
rst_n => dout[16]~reg0.ACLR
rst_n => dout[17]~reg0.ACLR
rst_n => dout[18]~reg0.ACLR
rst_n => dout[19]~reg0.ACLR
rst_n => dout[20]~reg0.ACLR
rst_n => dout[21]~reg0.ACLR
rst_n => dout[22]~reg0.ACLR
rst_n => dout[23]~reg0.ACLR
rst_n => beep_en~reg0.ACLR
rst_n => cnt_1s[0].ACLR
rst_n => cnt_1s[1].ACLR
rst_n => cnt_1s[2].ACLR
rst_n => cnt_1s[3].ACLR
rst_n => cnt_1s[4].ACLR
rst_n => cnt_1s[5].ACLR
rst_n => cnt_1s[6].ACLR
rst_n => cnt_1s[7].ACLR
rst_n => cnt_1s[8].ACLR
rst_n => cnt_1s[9].ACLR
rst_n => cnt_1s[10].ACLR
rst_n => cnt_1s[11].ACLR
rst_n => cnt_1s[12].ACLR
rst_n => cnt_1s[13].ACLR
rst_n => cnt_1s[14].ACLR
rst_n => cnt_1s[15].ACLR
rst_n => cnt_1s[16].ACLR
rst_n => cnt_1s[17].ACLR
rst_n => cnt_1s[18].ACLR
rst_n => cnt_1s[19].ACLR
rst_n => cnt_1s[20].ACLR
rst_n => cnt_1s[21].ACLR
rst_n => cnt_1s[22].ACLR
rst_n => cnt_1s[23].ACLR
rst_n => cnt_1s[24].ACLR
rst_n => cnt_1s[25].ACLR
rst_n => cnt_s_g[0].ACLR
rst_n => cnt_s_g[1].PRESET
rst_n => cnt_s_g[2].PRESET
rst_n => cnt_s_g[3].ACLR
rst_n => cnt_s_s[0].PRESET
rst_n => cnt_s_s[1].ACLR
rst_n => cnt_s_s[2].PRESET
rst_n => cnt_s_s[3].ACLR
rst_n => cnt_m_g[0].PRESET
rst_n => cnt_m_g[1].PRESET
rst_n => cnt_m_g[2].ACLR
rst_n => cnt_m_g[3].ACLR
rst_n => cnt_m_s[0].ACLR
rst_n => cnt_m_s[1].PRESET
rst_n => cnt_m_s[2].ACLR
rst_n => cnt_m_s[3].ACLR
rst_n => cnt_h_g[0].ACLR
rst_n => cnt_h_g[1].ACLR
rst_n => cnt_h_g[2].ACLR
rst_n => cnt_h_g[3].ACLR
rst_n => cnt_h_s[0].PRESET
rst_n => cnt_h_s[1].ACLR
rst_n => cnt_h_s[2].ACLR
rst_n => cnt_h_s[3].ACLR
rst_n => set_flag[0].ACLR
rst_n => set_flag[1].ACLR
rst_n => set_flag[2].ACLR
rst_n => set_flag[3].ACLR
rst_n => set_flag[4].ACLR
rst_n => set_flag[5].ACLR
rst_n => set_s_g[0].ACLR
rst_n => set_s_g[1].ACLR
rst_n => set_s_g[2].ACLR
rst_n => set_s_g[3].ACLR
rst_n => set_s_s[0].ACLR
rst_n => set_s_s[1].ACLR
rst_n => set_s_s[2].ACLR
rst_n => set_s_s[3].ACLR
rst_n => set_m_g[0].ACLR
rst_n => set_m_g[1].ACLR
rst_n => set_m_g[2].ACLR
rst_n => set_m_g[3].ACLR
rst_n => set_m_s[0].ACLR
rst_n => set_m_s[1].ACLR
rst_n => set_m_s[2].ACLR
rst_n => set_m_s[3].ACLR
rst_n => set_h_g[0].ACLR
rst_n => set_h_g[1].ACLR
rst_n => set_h_g[2].ACLR
rst_n => set_h_g[3].ACLR
rst_n => set_h_s[0].ACLR
rst_n => set_h_s[1].ACLR
rst_n => set_h_s[2].ACLR
rst_n => set_h_s[3].ACLR
rst_n => alarm_flag[0].ACLR
rst_n => alarm_flag[1].ACLR
rst_n => alarm_flag[2].ACLR
rst_n => alarm_flag[3].ACLR
rst_n => alarm_flag[4].ACLR
rst_n => alarm_flag[5].ACLR
rst_n => alarm_s_g[0].ACLR
rst_n => alarm_s_g[1].ACLR
rst_n => alarm_s_g[2].PRESET
rst_n => alarm_s_g[3].ACLR
rst_n => alarm_s_s[0].PRESET
rst_n => alarm_s_s[1].PRESET
rst_n => alarm_s_s[2].ACLR
rst_n => alarm_s_s[3].ACLR
rst_n => alarm_m_g[0].PRESET
rst_n => alarm_m_g[1].ACLR
rst_n => alarm_m_g[2].PRESET
rst_n => alarm_m_g[3].ACLR
rst_n => alarm_m_s[0].ACLR
rst_n => alarm_m_s[1].PRESET
rst_n => alarm_m_s[2].ACLR
rst_n => alarm_m_s[3].ACLR
rst_n => alarm_h_g[0].ACLR
rst_n => alarm_h_g[1].ACLR
rst_n => alarm_h_g[2].ACLR
rst_n => alarm_h_g[3].ACLR
rst_n => alarm_h_s[0].PRESET
rst_n => alarm_h_s[1].ACLR
rst_n => alarm_h_s[2].ACLR
rst_n => alarm_h_s[3].ACLR
rst_n => state_c~3.DATAIN
key[0] => idle2set_time.IN0
key[0] => set_time2idle.IN0
key[0] => always16.IN0
key[1] => idle2set_alarm.IN0
key[1] => set_alaram2idle.IN0
key[1] => always9.IN0
key[2] => add_set_s_g.IN1
key[2] => add_set_s_s.IN1
key[2] => add_set_m_g.IN1
key[2] => add_set_m_s.IN1
key[2] => add_set_h_g.IN1
key[2] => add_set_h_s.IN1
key[2] => add_alarm_s_g.IN1
key[2] => add_alarm_s_s.IN1
key[2] => add_alarm_m_g.IN1
key[2] => add_alarm_m_s.IN1
key[2] => add_alarm_h_g.IN1
key[2] => add_alarm_h_s.IN1
dout[0] <= dout[0]~reg0.DB_MAX_OUTPUT_PORT_TYPE
dout[1] <= dout[1]~reg0.DB_MAX_OUTPUT_PORT_TYPE
dout[2] <= dout[2]~reg0.DB_MAX_OUTPUT_PORT_TYPE
dout[3] <= dout[3]~reg0.DB_MAX_OUTPUT_PORT_TYPE
dout[4] <= dout[4]~reg0.DB_MAX_OUTPUT_PORT_TYPE
dout[5] <= dout[5]~reg0.DB_MAX_OUTPUT_PORT_TYPE
dout[6] <= dout[6]~reg0.DB_MAX_OUTPUT_PORT_TYPE
dout[7] <= dout[7]~reg0.DB_MAX_OUTPUT_PORT_TYPE
dout[8] <= dout[8]~reg0.DB_MAX_OUTPUT_PORT_TYPE
dout[9] <= dout[9]~reg0.DB_MAX_OUTPUT_PORT_TYPE
dout[10] <= dout[10]~reg0.DB_MAX_OUTPUT_PORT_TYPE
dout[11] <= dout[11]~reg0.DB_MAX_OUTPUT_PORT_TYPE
dout[12] <= dout[12]~reg0.DB_MAX_OUTPUT_PORT_TYPE
dout[13] <= dout[13]~reg0.DB_MAX_OUTPUT_PORT_TYPE
dout[14] <= dout[14]~reg0.DB_MAX_OUTPUT_PORT_TYPE
dout[15] <= dout[15]~reg0.DB_MAX_OUTPUT_PORT_TYPE
dout[16] <= dout[16]~reg0.DB_MAX_OUTPUT_PORT_TYPE
dout[17] <= dout[17]~reg0.DB_MAX_OUTPUT_PORT_TYPE
dout[18] <= dout[18]~reg0.DB_MAX_OUTPUT_PORT_TYPE
dout[19] <= dout[19]~reg0.DB_MAX_OUTPUT_PORT_TYPE
dout[20] <= dout[20]~reg0.DB_MAX_OUTPUT_PORT_TYPE
dout[21] <= dout[21]~reg0.DB_MAX_OUTPUT_PORT_TYPE
dout[22] <= dout[22]~reg0.DB_MAX_OUTPUT_PORT_TYPE
dout[23] <= dout[23]~reg0.DB_MAX_OUTPUT_PORT_TYPE
dout_mask[0] <= dout_mask[0]~reg0.DB_MAX_OUTPUT_PORT_TYPE
dout_mask[1] <= dout_mask[1]~reg0.DB_MAX_OUTPUT_PORT_TYPE
dout_mask[2] <= dout_mask[2]~reg0.DB_MAX_OUTPUT_PORT_TYPE
dout_mask[3] <= dout_mask[3]~reg0.DB_MAX_OUTPUT_PORT_TYPE
dout_mask[4] <= dout_mask[4]~reg0.DB_MAX_OUTPUT_PORT_TYPE
dout_mask[5] <= dout_mask[5]~reg0.DB_MAX_OUTPUT_PORT_TYPE
beep_en <= beep_en~reg0.DB_MAX_OUTPUT_PORT_TYPE


|fsm_clock|seg_driver:u_seg_driver
clk => seg_data[0]~reg0.CLK
clk => seg_data[1]~reg0.CLK
clk => seg_data[2]~reg0.CLK
clk => seg_data[3]~reg0.CLK
clk => seg_data[4]~reg0.CLK
clk => seg_data[5]~reg0.CLK
clk => seg_data[6]~reg0.CLK
clk => seg_data[7]~reg0.CLK
clk => point_r.CLK
clk => num[0].CLK
clk => num[1].CLK
clk => num[2].CLK
clk => num[3].CLK
clk => seg_sel_n[0]~reg0.CLK
clk => seg_sel_n[1]~reg0.CLK
clk => seg_sel_n[2]~reg0.CLK
clk => seg_sel_n[3]~reg0.CLK
clk => seg_sel_n[4]~reg0.CLK
clk => seg_sel_n[5]~reg0.CLK
clk => cnt[0].CLK
clk => cnt[1].CLK
clk => cnt[2].CLK
clk => cnt[3].CLK
clk => cnt[4].CLK
clk => cnt[5].CLK
clk => cnt[6].CLK
clk => cnt[7].CLK
clk => cnt[8].CLK
clk => cnt[9].CLK
clk => cnt[10].CLK
clk => cnt[11].CLK
clk => cnt[12].CLK
clk => cnt[13].CLK
clk => cnt[14].CLK
clk => cnt[15].CLK
rst_n => cnt[0].ACLR
rst_n => cnt[1].ACLR
rst_n => cnt[2].ACLR
rst_n => cnt[3].ACLR
rst_n => cnt[4].ACLR
rst_n => cnt[5].ACLR
rst_n => cnt[6].ACLR
rst_n => cnt[7].ACLR
rst_n => cnt[8].ACLR
rst_n => cnt[9].ACLR
rst_n => cnt[10].ACLR
rst_n => cnt[11].ACLR
rst_n => cnt[12].ACLR
rst_n => cnt[13].ACLR
rst_n => cnt[14].ACLR
rst_n => cnt[15].ACLR
rst_n => seg_data[0]~reg0.PRESET
rst_n => seg_data[1]~reg0.PRESET
rst_n => seg_data[2]~reg0.PRESET
rst_n => seg_data[3]~reg0.PRESET
rst_n => seg_data[4]~reg0.PRESET
rst_n => seg_data[5]~reg0.PRESET
rst_n => seg_data[6]~reg0.PRESET
rst_n => seg_data[7]~reg0.PRESET
rst_n => seg_sel_n[0]~reg0.ACLR
rst_n => seg_sel_n[1]~reg0.PRESET
rst_n => seg_sel_n[2]~reg0.PRESET
rst_n => seg_sel_n[3]~reg0.PRESET
rst_n => seg_sel_n[4]~reg0.PRESET
rst_n => seg_sel_n[5]~reg0.PRESET
rst_n => num[0].ACLR
rst_n => num[1].ACLR
rst_n => num[2].ACLR
rst_n => num[3].ACLR
rst_n => point_r.ENA
din[0] => Selector3.IN13
din[1] => Selector2.IN13
din[2] => Selector1.IN13
din[3] => Selector0.IN13
din[4] => Selector3.IN12
din[5] => Selector2.IN12
din[6] => Selector1.IN12
din[7] => Selector0.IN12
din[8] => Selector3.IN11
din[9] => Selector2.IN11
din[10] => Selector1.IN11
din[11] => Selector0.IN11
din[12] => Selector3.IN10
din[13] => Selector2.IN10
din[14] => Selector1.IN10
din[15] => Selector0.IN10
din[16] => Selector3.IN9
din[17] => Selector2.IN9
din[18] => Selector1.IN9
din[19] => Selector0.IN9
din[20] => Selector3.IN8
din[21] => Selector2.IN8
din[22] => Selector1.IN8
din[23] => Selector0.IN8
din_mask[0] => always2.IN1
din_mask[1] => always2.IN1
din_mask[2] => always2.IN1
din_mask[3] => always2.IN1
din_mask[4] => always2.IN1
din_mask[5] => always2.IN1
point_n[0] => Selector4.IN13
point_n[1] => Selector4.IN12
point_n[2] => Selector4.IN11
point_n[3] => Selector4.IN10
point_n[4] => Selector4.IN9
point_n[5] => Selector4.IN8
seg_data[0] <= seg_data[0]~reg0.DB_MAX_OUTPUT_PORT_TYPE
seg_data[1] <= seg_data[1]~reg0.DB_MAX_OUTPUT_PORT_TYPE
seg_data[2] <= seg_data[2]~reg0.DB_MAX_OUTPUT_PORT_TYPE
seg_data[3] <= seg_data[3]~reg0.DB_MAX_OUTPUT_PORT_TYPE
seg_data[4] <= seg_data[4]~reg0.DB_MAX_OUTPUT_PORT_TYPE
seg_data[5] <= seg_data[5]~reg0.DB_MAX_OUTPUT_PORT_TYPE
seg_data[6] <= seg_data[6]~reg0.DB_MAX_OUTPUT_PORT_TYPE
seg_data[7] <= seg_data[7]~reg0.DB_MAX_OUTPUT_PORT_TYPE
seg_sel_n[0] <= seg_sel_n[0]~reg0.DB_MAX_OUTPUT_PORT_TYPE
seg_sel_n[1] <= seg_sel_n[1]~reg0.DB_MAX_OUTPUT_PORT_TYPE
seg_sel_n[2] <= seg_sel_n[2]~reg0.DB_MAX_OUTPUT_PORT_TYPE
seg_sel_n[3] <= seg_sel_n[3]~reg0.DB_MAX_OUTPUT_PORT_TYPE
seg_sel_n[4] <= seg_sel_n[4]~reg0.DB_MAX_OUTPUT_PORT_TYPE
seg_sel_n[5] <= seg_sel_n[5]~reg0.DB_MAX_OUTPUT_PORT_TYPE


|fsm_clock|beep_driver:u_beep_driver
clk => beep_n~reg0.CLK
clk => add_flag.CLK
clk => cnt_10[0].CLK
clk => cnt_10[1].CLK
clk => cnt_10[2].CLK
clk => cnt_10[3].CLK
clk => cnt_delay[0].CLK
clk => cnt_delay[1].CLK
clk => cnt_delay[2].CLK
clk => cnt_delay[3].CLK
clk => cnt_delay[4].CLK
clk => cnt_delay[5].CLK
clk => cnt_delay[6].CLK
clk => cnt_delay[7].CLK
clk => cnt_delay[8].CLK
clk => cnt_delay[9].CLK
clk => cnt_delay[10].CLK
clk => cnt_delay[11].CLK
clk => cnt_delay[12].CLK
clk => cnt_delay[13].CLK
clk => cnt_delay[14].CLK
clk => cnt_delay[15].CLK
clk => cnt_delay[16].CLK
clk => cnt_delay[17].CLK
clk => cnt_delay[18].CLK
clk => cnt_delay[19].CLK
clk => cnt_delay[20].CLK
clk => cnt_delay[21].CLK
clk => cnt_delay[22].CLK
clk => cnt_delay[23].CLK
clk => cnt_delay[24].CLK
clk => cnt_delay[25].CLK
rst_n => cnt_delay[0].ACLR
rst_n => cnt_delay[1].ACLR
rst_n => cnt_delay[2].ACLR
rst_n => cnt_delay[3].ACLR
rst_n => cnt_delay[4].ACLR
rst_n => cnt_delay[5].ACLR
rst_n => cnt_delay[6].ACLR
rst_n => cnt_delay[7].ACLR
rst_n => cnt_delay[8].ACLR
rst_n => cnt_delay[9].ACLR
rst_n => cnt_delay[10].ACLR
rst_n => cnt_delay[11].ACLR
rst_n => cnt_delay[12].ACLR
rst_n => cnt_delay[13].ACLR
rst_n => cnt_delay[14].ACLR
rst_n => cnt_delay[15].ACLR
rst_n => cnt_delay[16].ACLR
rst_n => cnt_delay[17].ACLR
rst_n => cnt_delay[18].ACLR
rst_n => cnt_delay[19].ACLR
rst_n => cnt_delay[20].ACLR
rst_n => cnt_delay[21].ACLR
rst_n => cnt_delay[22].ACLR
rst_n => cnt_delay[23].ACLR
rst_n => cnt_delay[24].ACLR
rst_n => cnt_delay[25].ACLR
rst_n => beep_n~reg0.PRESET
rst_n => cnt_10[0].ACLR
rst_n => cnt_10[1].ACLR
rst_n => cnt_10[2].ACLR
rst_n => cnt_10[3].ACLR
rst_n => add_flag.ACLR
en => always2.IN1
beep_n <= beep_n~reg0.DB_MAX_OUTPUT_PORT_TYPE


